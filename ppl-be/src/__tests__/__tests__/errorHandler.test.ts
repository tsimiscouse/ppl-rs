import { Request, Response, NextFunction } from 'express';
import { errorHandler, notFound } from '../../middlewares/errorHandler';

describe('Error Handler Middleware', () => {
  let mockRequest: Partial<Request>;
  let mockResponse: Partial<Response>;
  let mockNext: jest.Mock;

  beforeEach(() => {
    mockRequest = {
      originalUrl: '/test/url'
    };
    mockResponse = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
      statusCode: 200
    };
    mockNext = jest.fn();

    // Spy on console.error to prevent logging during tests
    jest.spyOn(console, 'error').mockImplementation(() => {});
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('errorHandler', () => {
    it('should handle errors with default 500 status when statusCode is 200', () => {
      // Arrange
      const mockError = new Error('Test error');
      mockResponse.statusCode = 200;

      // Act
      errorHandler(
        mockError,
        mockRequest as Request,
        mockResponse as Response,
        mockNext
      );

      // Assert
      expect(mockResponse.status).toHaveBeenCalledWith(500);
      expect(mockResponse.json).toHaveBeenCalledWith({
        success: false,
        error: 'Test error'
      });
      expect(console.error).toHaveBeenCalledTimes(2); // Called for message and stack
    });

    it('should use existing status code when not 200', () => {
      // Arrange
      const mockError = new Error('Bad Request');
      mockResponse.statusCode = 400;

      // Act
      errorHandler(
        mockError,
        mockRequest as Request,
        mockResponse as Response,
        mockNext
      );

      // Assert
      expect(mockResponse.status).toHaveBeenCalledWith(400);
      expect(mockResponse.json).toHaveBeenCalledWith({
        success: false,
        error: 'Bad Request'
      });
    });

    it('should provide default error message when error message is empty', () => {
      // Arrange
      const mockError = new Error('');
      mockResponse.statusCode = 500;

      // Act
      errorHandler(
        mockError,
        mockRequest as Request,
        mockResponse as Response,
        mockNext
      );

      // Assert
      expect(mockResponse.status).toHaveBeenCalledWith(500);
      expect(mockResponse.json).toHaveBeenCalledWith({
        success: false,
        error: 'Internal Server Error'
      });
    });
  });

  describe('notFound', () => {
    it('should set status to 404 and call next with error', () => {
      // Act
      notFound(
        mockRequest as Request,
        mockResponse as Response,
        mockNext
      );

      // Assert
      expect(mockResponse.status).toHaveBeenCalledWith(404);
      expect(mockNext).toHaveBeenCalledTimes(1);
      
      // Get the error passed to next
      const errorPassedToNext = mockNext.mock.calls[0][0];
      expect(errorPassedToNext).toBeInstanceOf(Error);
      expect(errorPassedToNext.message).toBe('Not Found - /test/url');
    });

    it('should include the original URL in the error message', () => {
      // Arrange
      mockRequest.originalUrl = '/api/nonexistent/resource';
      
      // Act
      notFound(
        mockRequest as Request,
        mockResponse as Response,
        mockNext
      );
      
      // Assert
      const errorPassedToNext = mockNext.mock.calls[0][0];
      expect(errorPassedToNext.message).toBe('Not Found - /api/nonexistent/resource');
    });
  });

  describe('Integration between notFound and errorHandler', () => {
    it('should properly pass error from notFound to errorHandler', () => {
      // Create a new mock response to verify state changes
      const integrationMockResponse: Partial<Response> = {
        status: jest.fn().mockReturnThis(),
        json: jest.fn(),
        statusCode: 200
      };
      
      // First call notFound
      notFound(
        mockRequest as Request, 
        integrationMockResponse as Response, 
        mockNext
      );
      
      // Get the error generated by notFound
      const generatedError = mockNext.mock.calls[0][0];
      
      // Verify notFound set status to 404
      expect(integrationMockResponse.status).toHaveBeenCalledWith(404);
      
      // Now pass that error to errorHandler
      errorHandler(
        generatedError,
        mockRequest as Request,
        integrationMockResponse as Response,
        mockNext
      );
      
      // Assert errorHandler handled the error correctly
      expect(integrationMockResponse.json).toHaveBeenCalledWith({
        success: false,
        error: 'Not Found - /test/url'
      });
    });
  });
});